{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vertex Animation Studio for UE5","text":"<p>Convert skeletal mesh characters into high-performance vertex animations for rendering crowds and multiple animated characters. Vertex Animation Studio preserves animation quality while reducing CPU overhead and enabling efficient GPU-based rendering through mesh instancing.</p> <p>Important: This plugin requires Unreal Engine 5.4 or above.</p> <p></p>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#main-components","title":"Main Components","text":"<ol> <li>Vertex Anim Mesh Component: For single-character implementations requiring individual control</li> <li>Vertex Anim Instanced Mesh Component: For efficient rendering of multiple characters</li> <li>Animation System: Manages animation playback through Single and AnimList modes</li> <li>VA Asset Collection: Manages and stores all data required for vertex animations.  It serves as a container holding meshes, animations, and associated data</li> <li>Crowd Tools Editor Mode: For visual management and configuration of character groups</li> </ol>"},{"location":"#vertex-animations","title":"Vertex Animations","text":"<ul> <li>Animation Types:<ul> <li>Bone Animations: Enables sharing between meshes, ideal for memory-flexible projects</li> <li>Vertex Animations: Reduces material costs, requires more texture memory, unique per mesh</li> </ul> </li> <li>Blueprint Integration: Program animation behavior using Blueprint-based control systems</li> <li>Sequencer Integration: Use vertex animations in cinematic sequences and cutscenes</li> </ul>"},{"location":"#workflow-integration","title":"Workflow Integration","text":"<ul> <li>Convert skeletal meshes with right-click menu</li> <li>Automatic material fixes during conversion</li> <li>Editor tools for placing and managing crowds</li> <li>Timeline control through Sequencer</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>The plugin is most effective for:</p> <ul> <li>Dense urban environments with background NPCs</li> <li>Large-scale battle sequences</li> <li>Games requiring numerous background characters</li> <li>Performance-critical scenes with multiple animations</li> </ul>"},{"location":"#technical-overview","title":"Technical Overview","text":""},{"location":"#performance","title":"Performance","text":"<ul> <li>Eliminates per-frame skeletal computation overhead</li> <li>Uses GPU-efficient instanced rendering</li> <li>Optimizes memory usage through shared resources</li> <li>Scales effectively with large numbers of characters</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Compatible with UE 5.4 and above</li> <li>Flexible animation management</li> <li>Integrated editor tools</li> </ul>"},{"location":"#to-get-started","title":"To Get Started","text":"<ul> <li>Follow the Getting Started guide to begin implementing the Vertex Animation Studio in your project</li> <li>Explore the Troubleshooting page if you encounter any issues</li> </ul>"},{"location":"animation-control/","title":"Animation Control","text":"<p>The Vertex Animation Studio provides helper functions that automatically manage animation modes and provide consistent control whether you're working with single characters or crowds.</p>"},{"location":"animation-control/#architecture-overview","title":"Architecture Overview","text":"<p>The animation system operates through two distinct modes managed by the Animation Mode Manager:</p> <ul> <li>Single Mode: Direct control of individual animations</li> <li>AnimList Mode: List-based animation sequences</li> </ul>"},{"location":"animation-control/#single-animation-mode","title":"Single Animation Mode","text":"<p>Single Mode provides direct, precise control over animations. When you call <code>PlaySingleAnimation</code>, the system:</p> <ol> <li>Automatically switches the instances to Single Mode</li> <li>Starts the specified animation immediately</li> <li>Maintains this mode until you call a different animation function</li> </ol> <p></p> <p>The <code>PlaySingleAnimation</code> function accepts:</p> <ul> <li>Animation: The specific animation from the VA Asset Collection</li> <li>Instance ID / Instance IDs: Single instance or array of instances to affect</li> <li>Play Rate: Animation speed multiplier</li> <li>Start Position: Where to start in the animation (0-1)</li> <li>Blend Duration: Time to blend from current animation</li> <li>Loop: Whether to loop the animation</li> <li>Reverse: Play the animation backwards</li> <li>Override Saved Animation: When true, saves this animation state to the level so it persists across editor sessions and plays automatically on level load</li> </ul>"},{"location":"animation-control/#all-available-functions","title":"All Available Functions","text":"<p>Core functions available in Single Mode:</p> <ul> <li><code>PlaySingleAnimation</code>: Start a specific animation</li> <li><code>StopAnimation</code>: Stop the current animation</li> <li><code>PauseAnimation</code>: Pause/resume playback</li> <li><code>SetAnimationTime</code>: Jump to a specific point</li> <li><code>SetAnimationSpeed</code>: Adjust playback rate</li> <li><code>GetCurrentAnimation</code>: Query what's playing</li> </ul>"},{"location":"animation-control/#animation-list-mode","title":"Animation List Mode","text":"<p>AnimList Mode enables complex animation behaviors through Animation Lists. When you call <code>PlayAnimationList</code>, the system:</p> <ol> <li>Automatically switches the instances to AnimList Mode</li> <li>Activates the specified Animation List</li> <li>The list's logic takes control of animation playback</li> </ol> <p></p> <p>The <code>PlayAnimationList</code> function accepts:</p> <ul> <li>Instance ID / Instance IDs: Single instance or array of instances to affect</li> <li>Animation List Index: Which list slot to use in the component (the Animation List object must be pre-configured in the component at this index)</li> <li>Override Saved Animation: When true, saves this list assignment to the level so it persists across editor sessions and plays automatically on level load</li> </ul>"},{"location":"animation-control/#direct-mode-object-access","title":"Direct Mode Object Access","text":"<p>For advanced control, you can get the animation mode object directly and call functions on specific instances:</p>"},{"location":"animation-control/#getting-mode-objects","title":"Getting Mode Objects","text":"<p>Use these functions from the VA Component to access mode objects directly:</p> <ul> <li><code>GetAnimationModeObject</code> with <code>VAAnimationMode_Single</code> class - Returns the Single Mode object for direct function calls</li> <li><code>GetAnimationModeObject</code> with <code>VAAnimationMode_AnimList</code> class - Returns the AnimList Mode object for direct function calls</li> <li><code>GetAnimationModeObjectForInstance</code> with an Instance ID - Returns the mode object currently controlling that specific instance</li> </ul>"},{"location":"animation-control/#direct-function-calls","title":"Direct Function Calls","text":"<p>Once you have a mode object, you can call functions directly on specific instances:</p> <p>Single Mode Functions:</p> <ul> <li><code>SetPlayRate</code>: Change animation speed for specific instances</li> <li><code>SetPosition</code>: Jump to specific animation positions  </li> <li><code>Pause</code> / <code>Resume</code>: Control playback state per instance</li> <li><code>SetReverse</code>: Change animation direction for instances</li> <li><code>StepForward</code> / <code>StepBackward</code>: Frame-by-frame control</li> </ul> <p>AnimList Mode Functions:</p> <ul> <li><code>ChangeInstanceList</code>: Switch instances to different animation lists</li> <li><code>GetInstanceList</code>: Query which list an instance is currently using</li> <li><code>GetInstancesInList</code>: Get all instances using a specific animation list</li> <li><code>GetInstanceListObject</code>: Get the Animation List object for an instance</li> <li><code>GetAnimationListCollection</code>: Access the collection of available animation lists</li> </ul> <p>This approach provides the most granular control over individual instances and their animation behavior.</p>"},{"location":"animation-control/#events-and-the-crowd-system","title":"Events and the Crowd System","text":"<p>The animation system includes a robust event system that's particularly powerful when used with the Crowd Tools. Events can be broadcast to all instances or specific subsets of your crowd, allowing you to make crowds react dynamically to gameplay events, level changes, or player actions.</p>"},{"location":"animation-control/#broadcasting-events","title":"Broadcasting Events","text":"<p>For Crowd Systems: Events are broadcast through the AVACrowds parent actor to all crowd instances:</p> <p></p> <p>For Non-Crowd Systems: If you're using VA Mesh Component without the crowd tools, you'll need to implement your own event system to communicate with your Animation Lists.</p>"},{"location":"animation-control/#event-handling-in-animation-lists","title":"Event Handling in Animation Lists","text":"<p>Custom Animation Lists receive events by overriding the <code>CustomAnimationEvent</code> function. Here's an example:</p> <p></p>"},{"location":"animation-control/#see-also","title":"See Also","text":"<ul> <li>Custom Animation Lists - Create custom animation behaviors</li> <li>VA Mesh Component - Single character setup</li> <li>VA Instanced Mesh Component - Crowd setup</li> <li>Crowd Tools - Placement and management</li> </ul>"},{"location":"crowd-brushes/","title":"Crowd Brushes","text":"<p>Tools for controlling how crowd elements are placed and configured in your scene. Brushes define instance properties, animation settings, and placement rules for creating diverse and natural-looking crowds.</p> <p></p>"},{"location":"crowd-brushes/#1-paint-settings","title":"1. Paint Settings","text":"<ul> <li>Mesh Index selection: If using Bone Animation types you can select which sub mesh to use here</li> <li>Shadow casting options: Toggle shadow casting on the instances when they are placed in the level</li> </ul>"},{"location":"crowd-brushes/#2-per-instance-animation-data","title":"2. Per Instance Animation Data","text":"<ul> <li>Animation List Logic: Select and edit your Animation List settings. For more information see Custom Animation Lists</li> </ul>"},{"location":"crowd-brushes/#3-painting-settings","title":"3. Painting Settings","text":"<ul> <li>Density (per 1Kuu): Controls the number of instances placed within a 10m\u00b2 area</li> <li>Min Distance Between Instances: Sets the minimum spacing required between newly placed instances within the paint brush area</li> <li>Scaling Mode: Select from various scaling constraints Uniform, Free and Lock XY/XZ/YZ</li> <li>Scale (X, Y, Z): Define minimum and maximum scale values for each axis - instances will be randomly scaled within these bounds</li> </ul>"},{"location":"crowd-brushes/#4-placement-settings","title":"4. Placement Settings","text":"<ul> <li>Z Offset: Adjusts the vertical position of instances in the level. Use different Min/Max values to create random height variations</li> <li>Align to Normal: Automatically orients instances to match the surface normal direction they are painted on (limited by Ground Slope Angle)</li> <li>Average Normal: Smooths instance orientation by averaging nearby surface normals on uneven terrain</li> <li>Average Normal Single Component: Limits normal averaging to a single component for more controlled orientation</li> <li>Ground Slope Angle: Defines the minimum and maximum slope angles where instances can be painted and aligned with normals</li> <li>Brush Yaw: Controls instance facing direction. Set different Min/Max values to create random rotations around the vertical axis</li> <li>Brush Pitch: Controls forward/backward tilt angle. Set Min/Max bounds to randomize the pitch of placed instances</li> </ul>"},{"location":"crowd-brushes/#creating-brushes","title":"Creating Brushes","text":"<p>There are three ways to create a brush asset.</p> <p>Direct Addition:</p> <ul> <li>Click \"+ Mesh/Brush Asset\" in Crowd Editor</li> <li>Select your VA Asset Collection</li> <li>Choose where to save the new brush asset</li> </ul> <p>Drag and Drop:</p> <ul> <li>Drag VA Asset Collection to \"Drop Your Assets Here\" area</li> <li>Choose where to save the new brush asset</li> </ul> <p></p> <p>Right Click Menu:</p> <ul> <li>Right click your VA Asset Collection in the content browser and choose <code>Make Vertex Crowd Brush</code></li> <li>Choose where to save the new brush asset</li> </ul> <p></p>"},{"location":"crowd-brushes/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how Crowd Brushes fit into the overall process</li> <li>Crowd Tools Editor Mode - Main editor interface</li> <li>Paint Tool - Use brushes with free-form placement</li> <li>Grid Tool - Use brushes with grid-based placement</li> <li>Single Placement - Use brushes with precise placement</li> <li>VA Asset Collection - The asset type used by Crowd Brushes</li> <li>Custom Animation Lists - Define custom animation behaviors</li> </ul>"},{"location":"crowd-tools-editor-mode/","title":"Crowd Editor Mode","text":"<p>A specialized editor mode for placing and managing crowd instances in your Unreal Engine level. This mode provides an intuitive interface with various tools for efficient crowd layout creation and management.</p>"},{"location":"crowd-tools-editor-mode/#main-tools","title":"Main Tools","text":"<ul> <li>Select/Deselect: Manage instance selection</li> <li>Ground: Align instances to surfaces</li> <li>Paint: Paint multiple instances using brush settings</li> <li>Grid: Place instances in grid patterns</li> <li>Single: Place individual instances</li> <li>Erase: Remove instances</li> </ul> <p>Note: See Keyboard Shortcuts for a list of helpful keyboard shortcuts while using each of the crowd tool modes.</p>"},{"location":"crowd-tools-editor-mode/#quick-start-guide","title":"Quick Start Guide","text":"<ol> <li> <p>Add a VA Asset Collection or Crowd Brush Assets via the '+' button or by drag and dropping assets in the designated area  </p> </li> <li> <p>Configure brush settings and select them to use with the crowd placement tools </p> <ol> <li>Select which crowd brushes you would like to use with a placement tool</li> <li>Select from Paint, Grid or Single Placement modes</li> </ol> </li> <li> <p>Start placing instances into the level using your chosen placement tool</p> </li> </ol>"},{"location":"crowd-tools-editor-mode/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how Crowd Tools fit into the overall process</li> <li>Crowd Brushes - Detailed brush configuration</li> <li>Paint Tool - Free-form brush-based placement</li> <li>Grid Tool - Structured grid-based placement</li> <li>Single Placement - Precise individual placement</li> <li>Keyboard Shortcuts - List of keyboard shortcuts</li> <li>VA Asset Collection - The asset type used by Crowd Tools</li> <li>VA Instanced Mesh Component - The component used for crowd instances</li> </ul>"},{"location":"crowd-tools-grid/","title":"Grid Tool","text":"<p>The Grid tool enables precise, structured placement of crowd elements in your scene using a configurable grid system.</p> <p></p>"},{"location":"crowd-tools-grid/#grid-options","title":"Grid Options","text":""},{"location":"crowd-tools-grid/#general-settings","title":"General Settings","text":"<ul> <li>Project to Ground: Aligns instances to the surface beneath them</li> <li>Use Brush Hub: Applies brush settings to placed instances</li> <li>Random Order: Randomizes the placement sequence of instances</li> <li>Random Empty %: Sets the percentage of grid cells to leave empty</li> <li>Empty Placement: Fine-tunes the empty space distribution</li> </ul>"},{"location":"crowd-tools-grid/#grid-pattern-x","title":"Grid Pattern X","text":"<p>Controls the horizontal grid layout:</p> <ul> <li>Count X: Number of instances along the X-axis</li> <li>Extent X: Total width of the grid in units</li> <li>Centered X: Centers the grid horizontally around the placement point</li> </ul>"},{"location":"crowd-tools-grid/#grid-pattern-y","title":"Grid Pattern Y","text":"<p>Controls the vertical grid layout:</p> <ul> <li>Count Y: Number of instances along the Y-axis</li> <li>Extent Y: Total depth of the grid in units</li> <li>Centered Y: Centers the grid vertically around the placement point</li> </ul>"},{"location":"crowd-tools-grid/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how placement tools fit into the overall process</li> <li>Crowd Tools Editor Mode - Main editor interface</li> <li>Crowd Brushes - Configure brush properties for grid placement</li> <li>Paint Tool - Alternative free-form placement</li> <li>Single Placement - Alternative precise placement</li> <li>Keyboard Shortcuts - Available shortcuts while using tools</li> </ul>"},{"location":"crowd-tools-keyboard-shortcuts/","title":"Crowd Tools Keyboard Shortcuts","text":"<p>This page outlines the keyboard shortcuts available when using the tools in Crowd Editor Mode.</p>"},{"location":"crowd-tools-keyboard-shortcuts/#select-mode-shortcuts","title":"Select Mode Shortcuts","text":"Shortcut Action <code>F</code> Focus on Selected <code>Ctrl + D</code> Deselect All <code>Ctrl + G</code> Snap To Ground <code>Del</code> Delete Selected <code>Alt + Move</code> Duplicate"},{"location":"crowd-tools-keyboard-shortcuts/#paint-mode-shortcuts","title":"Paint Mode Shortcuts","text":"Shortcut Action <code>Ctrl + Scroll</code> Resize Brush <code>Shift + Paint</code> Erase"},{"location":"crowd-tools-keyboard-shortcuts/#single-placement-mode-shortcuts","title":"Single Placement Mode Shortcuts","text":"Shortcut Action <code>Click + Drag</code> Rotate &amp; Place <code>Z</code> Rotate Left (Hold) <code>X</code> Rotate Right (Hold) <code>Ctrl + Scroll</code> Resize Instance"},{"location":"crowd-tools-keyboard-shortcuts/#erase-mode-shortcuts","title":"Erase Mode Shortcuts","text":"Shortcut Action <code>Ctrl + Scroll</code> Resize Brush"},{"location":"crowd-tools-keyboard-shortcuts/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how Crowd Tools fit into the overall process</li> <li>Crowd Tools Editor Mode - Main editor interface</li> <li>Paint Tool - Free-form brush-based placement</li> <li>Grid Tool - Structured grid-based placement</li> <li>Single Placement - Precise individual placement</li> <li>Crowd Brushes - Configure brush properties</li> </ul>"},{"location":"crowd-tools-paint/","title":"Paint Tool","text":"<p>The Paint tool provides a free-form placement method for crowd elements in your scene. This intuitive brush-based system allows you to quickly populate areas with crowd members.</p> <p></p>"},{"location":"crowd-tools-paint/#brush-options","title":"Brush Options","text":"<p>The Paint tool provides two main controls in the Brush Options section:</p>"},{"location":"crowd-tools-paint/#brush-size","title":"Brush Size","text":"<ul> <li>Numerical control for precise brush size adjustment</li> <li>Use <code>Ctrl + Scroll Wheel</code> to quickly resize the brush</li> <li>Larger sizes for broad coverage, smaller for precise placement</li> </ul>"},{"location":"crowd-tools-paint/#paint-density","title":"Paint Density","text":"<ul> <li>Percentage control (0-100%) for instance density</li> <li>Works with brush's \"Density (per 1Kuu)\" setting to determine final crowd density</li> </ul> <p>For additional controls while painting, see Crowd Tools Keyboard Shortcuts.</p>"},{"location":"crowd-tools-paint/#meshbrush-asset-selection","title":"Mesh/Brush Asset Selection","text":"<p>Below the brush options, you can select from your available crowd brushes. Each brush contains its own:</p>"},{"location":"crowd-tools-paint/#brush-settings","title":"Brush Settings","text":"<p>Each brush defines how instances are placed and configured in your scene:</p> <ul> <li>Instance density and spacing</li> <li>Scale ranges and modes</li> <li>Surface alignment and height offset</li> <li>Rotation and orientation</li> </ul> <p>For detailed configuration options, see Crowd Brushes</p>"},{"location":"crowd-tools-paint/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how placement tools fit into the overall process</li> <li>Crowd Tools Editor Mode - Main editor interface</li> <li>Crowd Brushes - Configure brush properties for painting</li> <li>Grid Tool - Alternative grid-based placement</li> <li>Single Placement - Alternative precise placement</li> <li>Keyboard Shortcuts - Available shortcuts while painting</li> </ul>"},{"location":"crowd-tools-single/","title":"Single Placement Tool","text":"<p>The Single Placement tool allows for precise, individual placement of crowd elements in your scene with individual control over position and orientation.</p>"},{"location":"crowd-tools-single/#usage","title":"Usage","text":"<p>The Single Placement tool primarily uses keyboard shortcuts for adjusting instances, with a handy shortcut overlay visible in the bottom right of the screen. For a complete list of shortcuts, see Keyboard Shortcuts.</p>"},{"location":"crowd-tools-single/#basic-controls","title":"Basic Controls","text":"<ul> <li>Mouse Placement: Click to place an instance at the cursor location</li> <li>Rotation: <ul> <li>Use <code>Z</code> and <code>X</code> keys to rotate left and right respectively</li> <li>Hold left mouse button and drag to rotate the instance. Release to place with the current rotation</li> </ul> </li> <li>Size Adjustment: Use <code>Ctrl + Scroll Wheel</code> to resize the instance</li> </ul>"},{"location":"crowd-tools-single/#placement-settings","title":"Placement Settings","text":"<p>Instance placement is affected by the selected crowd brush's placement settings, including:</p> <ul> <li>Surface alignment</li> <li>Height offset</li> <li>Rotation constraints</li> <li>Other placement rules</li> </ul> <p>For detailed brush configuration options, see Crowd Brushes.</p>"},{"location":"crowd-tools-single/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how placement tools fit into the overall process</li> <li>Crowd Tools Editor Mode - Main editor interface</li> <li>Crowd Brushes - Configure brush properties for single placement</li> <li>Paint Tool - Alternative free-form placement</li> <li>Grid Tool - Alternative grid-based placement</li> <li>Keyboard Shortcuts - Complete list of available shortcuts</li> <li>Troubleshooting - Find solutions for common problems</li> </ul>"},{"location":"custom-animation-lists/","title":"Custom Animation Lists","text":"<p>Animation Lists allow you to create reusable animation behaviors that can be applied to any number of instances. By creating custom Animation List blueprints, you can define complex logic for how animations play, transition, and respond to events.</p>"},{"location":"custom-animation-lists/#creating-a-custom-animation-list","title":"Creating a Custom Animation List","text":"<p>To create a custom Animation List:</p> <ol> <li>Create a new Blueprint class</li> <li>Select <code>VAAnimationList</code> as the parent class</li> <li>Name your blueprint (e.g., <code>BP_SoccerFanAnimListLogic</code>)</li> <li>Open the blueprint and override the events you need</li> </ol> <p></p>"},{"location":"custom-animation-lists/#event-begin-instances","title":"Event Begin Instances","text":"<p>Called when instances are assigned to use this Animation List. Use this to initialize any custom logic or state.</p>"},{"location":"custom-animation-lists/#event-end-instances","title":"Event End Instances","text":"<p>Called when instances stop using this Animation List. Use this for cleanup.</p>"},{"location":"custom-animation-lists/#event-update-instances","title":"Event Update Instances","text":"<p>Called every frame for all active instances. Use this for time-based logic or checking transition conditions.</p>"},{"location":"custom-animation-lists/#event-animation-completed","title":"Event Animation Completed","text":"<p>Called when an animation finishes playing. Use this to choose the next animation or transition to a different behavior.</p>"},{"location":"custom-animation-lists/#event-custom-animation-event","title":"Event Custom Animation Event","text":"<p>Called when events are broadcast from the AVACrowds actor or your custom event system. Use this to respond to gameplay events.</p> <p>Update Context: All events receive an Update Context parameter that provides functions to control animations (play, pause, set position, etc.) and query current animation state (which animation is playing, current position, play rate, etc.) for any instance.</p> <p></p>"},{"location":"custom-animation-lists/#working-with-the-update-context","title":"Working with the Update Context","text":"<p>The Update Context is your primary tool for controlling animations from within your Animation List logic. It provides:</p>"},{"location":"custom-animation-lists/#animation-control-functions","title":"Animation Control Functions","text":"<ul> <li><code>PlayAnimation</code>: Start a new animation for specific instances</li> <li><code>PauseAnimation</code> / <code>ResumeAnimation</code>: Pause and resume playback</li> <li><code>SetAnimationPosition</code>: Jump to a specific point in the animation</li> <li><code>SetAnimationPlayRate</code>: Change animation speed</li> <li><code>SetAnimationLooping</code>: Enable/disable looping</li> <li><code>StopAnimation</code>: Stop the current animation</li> </ul>"},{"location":"custom-animation-lists/#query-functions","title":"Query Functions","text":"<ul> <li><code>GetInstanceIds</code>: Get all instances using this list</li> <li><code>GetAnimation</code>: Get which animation is currently playing</li> <li><code>GetPosition</code>: Get current position in the animation (0-1)</li> <li><code>GetPlayRate</code>: Get current playback speed</li> <li><code>GetPlaying</code>: Check if animation is playing</li> <li><code>GetLooping</code>: Check if animation is looping</li> </ul> <p>Example: For a detailed implementation example, see <code>Plugins/VertexAnimation/Content/DemoMap/Blueprints/SoccerGame/BP_SoccerFanAnimListLogic.uasset</code></p>"},{"location":"custom-animation-lists/#instance-data-system","title":"Instance Data System","text":"<p>Animation Lists can store custom data per instance, allowing each instance to maintain its own state and behavior parameters:</p>"},{"location":"custom-animation-lists/#custom-struct-data","title":"Custom Struct Data","text":"<p>Create custom struct types to store per-instance data that your Animation List logic can use:</p> <ul> <li>State Information: Current behavior state, timers, counters</li> <li>Randomization Data: Random seeds, variation parameters</li> <li>Logic Parameters: Custom thresholds, triggers, or conditions</li> <li>Behavior Memory: Previous actions, history, or context</li> </ul>"},{"location":"custom-animation-lists/#instance-data-functions","title":"Instance Data Functions","text":"<p>Use these helper functions to manage per-instance data:</p> <ul> <li><code>SetInstanceAnimListData</code>: Store custom struct data for a specific instance</li> <li><code>GetInstanceAnimListData</code>: Retrieve custom struct data from an instance  </li> <li><code>ClearInstanceAnimListData</code>: Remove stored data from an instance</li> </ul> <p></p> <p></p> <p>This system enables complex per-instance behaviors like state machines, conditional logic, and persistent animation behaviors that vary between instances.</p>"},{"location":"custom-animation-lists/#built-in-animation-list-types","title":"Built-in Animation List Types","text":"<p>The plugin includes pre-built Animation List types you can use or extend:</p>"},{"location":"custom-animation-lists/#sequence-list","title":"Sequence List","text":"<p>Plays animations in the order they appear in the list. When the last animation completes, it loops back to the first.</p>"},{"location":"custom-animation-lists/#random-list","title":"Random List","text":"<p>Randomly selects animations from the list. You can configure weights and prevent the same animation from playing twice in a row.</p>"},{"location":"custom-animation-lists/#see-also","title":"See Also","text":"<ul> <li>Animation Control - Overview of the animation system and modes</li> <li>VA Mesh Component - Single character setup</li> <li>VA Instanced Mesh Component - Crowd setup</li> <li>Crowd Tools - Placement and management tools</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide shows you how to convert skeletal mesh animations to vertex animations and implement them in your project.</p>"},{"location":"getting-started/#workflow-overview","title":"Workflow Overview","text":"<pre><code>graph TD\n    A[Create VA Asset] --&gt; B[Choose Component]\n    B --&gt; C1[Single Character]\n    B --&gt; C2[Multiple Characters]\n    C1 --&gt; D[Configure Animations]\n    C2 --&gt; E[Use Crowd Tools]\n    E --&gt; D</code></pre>"},{"location":"getting-started/#step-1-create-va-asset","title":"Step 1: Create VA Asset","text":"<ol> <li>Right-click your skeletal mesh in Content Browser</li> <li>Choose animation type:<ul> <li>Make Bone Animation: While this method enables animation sharing between multiple meshes and accommodates more animations and vertices than Vertex Animation, it is not as performant. Best for memory-flexible projects where you need to share animations across different characters.</li> <li>Make Vertex Animation: This method is more performant with lower material costs but requires larger textures. Animations are unique per mesh and cannot be shared. Best for maximum FPS in crowd scenes.</li> </ul> </li> <li>Select animations to include in your VA Asset Collection</li> <li>Click \"Create Asset\" and choose save location</li> </ol>"},{"location":"getting-started/#what-is-a-va-asset-collection","title":"What is a VA Asset Collection?","text":"<p>A VA Asset Collection is the core asset that stores all data required for vertex animations. Learn more about what it contains in the VA Asset Collection documentation.</p>"},{"location":"getting-started/#step-2-fix-materials","title":"Step 2: Fix Materials","text":"<p>Since vertex animations work differently than skeletal animations, your materials need to be modified. A dialog will appear showing any material errors:</p> <p></p> <p>When resolving material errors, you'll have two options:</p> <ul> <li>Create Copy: Creates duplicates of your materials before making changes (recommended to preserve originals)</li> <li>Modify Original: Directly modifies your existing materials</li> </ul> <p></p> <p>After completing these steps, you'll have a new VA Asset Collection in your content browser:</p> <p></p>"},{"location":"getting-started/#step-3-configure-asset-optional","title":"Step 3: Configure Asset (Optional)","text":"<p>Double-click your VA Asset Collection to open the editor and adjust settings:</p> <ul> <li>Animation Settings: Frame rates, compression, optimization - Learn more</li> <li>Mesh Settings: LODs, vertex limits, texture sizes - Learn more</li> <li>Custom Data: Per-instance variations like color tints - Learn more</li> </ul> <p>Click \"Rebuild Asset\" after making changes to apply them.</p>"},{"location":"getting-started/#step-4-choose-implementation","title":"Step 4: Choose Implementation","text":"<ul> <li>Single Character: Use VA Mesh Component for individual characters needing precise control</li> <li>Multiple Characters: Use VA Instanced Mesh Component for crowds and multiple characters</li> </ul>"},{"location":"getting-started/#step-5-place-characters-multiple-characters-only","title":"Step 5: Place Characters (Multiple Characters Only)","text":"<p>Use Crowd Tools for easy placement:</p> <ul> <li>Paint Tool: Free-form brush placement</li> <li>Grid Tool: Structured grid placement  </li> <li>Single Tool: Precise individual placement</li> </ul> <p></p>"},{"location":"getting-started/#step-6-control-animations","title":"Step 6: Control Animations","text":"<p>Configure animations through:</p> <ul> <li>Animation Control: Control animations with Single and AnimList modes</li> <li>Custom Animation Lists: Create custom animation behaviors</li> <li>Sequencer Integration: Cinematic control</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>VA Asset Collection: Manage your animation assets</li> <li>VA Asset Collection: Fine-tune asset settings</li> <li>Troubleshooting: Solve common issues</li> </ul>"},{"location":"sequencer-integration/","title":"Sequencer Integration (WIP)","text":"<p>The Vertex Animation Studio integrates with Unreal Engine's Sequencer for cinematic control of vertex animations.</p>"},{"location":"sequencer-integration/#how-to-use-va-animations-in-sequencer","title":"How to Use VA Animations in Sequencer","text":""},{"location":"sequencer-integration/#step-1-create-a-blueprint-actor","title":"Step 1: Create a Blueprint Actor","text":"<ol> <li>Create a new Blueprint Actor</li> <li>Add a VA Mesh Component to your Blueprint</li> <li>Configure the VA Mesh Component with your VA Asset Collection</li> <li>Save the Blueprint</li> </ol>"},{"location":"sequencer-integration/#step-2-add-to-sequencer","title":"Step 2: Add to Sequencer","text":"<ol> <li>Open your Level Sequence in Sequencer</li> <li>Drag your Blueprint Actor into the level (if not already placed)</li> <li>Click the \"+ Track\" button in Sequencer</li> <li>Select your Blueprint Actor from the list</li> </ol>"},{"location":"sequencer-integration/#step-3-add-va-animation-track","title":"Step 3: Add VA Animation Track","text":"<ol> <li>In the Sequencer timeline, find your Blueprint Actor</li> <li>Right-click on the VA Mesh Component</li> <li>Select \"VA Animation Track\" from the context menu</li> <li>Select the first animation to add the track</li> </ol>"},{"location":"sequencer-integration/#step-4-add-animations","title":"Step 4: Add Animations","text":"<ol> <li>Right-click on the VA Animation Track</li> <li>Select \"Add Animation Section\"</li> <li>Choose an animation from your VA Asset Collection</li> <li>The animation section appears on the timeline</li> </ol>"},{"location":"sequencer-integration/#step-5-configure-animation-properties","title":"Step 5: Configure Animation Properties","text":"<ol> <li>Right-click on the animation span in the track to open properties</li> <li>In the properties popup, you can adjust:</li> <li>Animation: Choose which animation to play</li> <li>Play Rate: Speed of playback (1.0 = normal)</li> <li>Reverse: Play animation backwards</li> <li>Drag the edges of the animation span to adjust duration</li> <li>Move the span along the timeline to change when it plays</li> </ol>"},{"location":"sequencer-integration/#tips","title":"Tips","text":"<ul> <li>Animations must exist in the VA Asset Collection assigned to your component</li> <li>Use consistent frame rates between your animations and Sequencer project</li> <li>If you see jumpiness in playback, disable motion blur in your Post Process Volume by setting Motion Blur Amount to 0</li> </ul> <p>Note: Sequencer integration is currently experimental and work-in-progress. Some features may be limited or subject to change in future updates.</p>"},{"location":"sequencer-integration/#see-also","title":"See Also","text":"<ul> <li>VA Mesh Component - Component setup</li> <li>VA Asset Collection - Managing animations</li> <li>Getting Started - Getting started with the plugin</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide helps you diagnose and resolve common issues you might encounter while using Vertex Animation Studio.</p> Why are my animations playing slow? <p> This is usually related to the animation sequence frame rate. To fix: <ol> <li>Go to Import Settings</li> <li>Open the Advanced section</li> <li>Enable \"Set Default Sample Rate\"</li> <li>Click the \"Reimport Animation\" button at the top</li> <li>Open your VA Asset Collection and press the Rebuild button </li> </ol> Should I use translucent materials with my vertex animated meshes? <p> For non-Nanite meshes, translucent materials can be used but may impact performance. However, when using Nanite, you must use masked materials instead of translucent. Be aware that masked materials can potentially create holes in your mesh when using the Nanite setting. </p> Why does my mesh look low quality or broken when enabling Nanite support? <p> If your mesh appears broken or low quality with Nanite enabled, it's likely using the fallback mesh instead of Nanite. This typically happens when: <ol> <li>Materials are set to translucent (use masked materials instead)</li> <li>After switching to masked materials, rebuild your VA Asset Collection </li> </ol> Error Creating Vertex Animation: Required texture dimension exceeds maximum. <p></p> <p>This error occurs when the combined size of vertex count and animation frames exceeds the system's limits. The total size is calculated by multiplying the number of vertices by the number of animation frames and then taking the square root of the result. The data will need to be written to a texture with these dimensions. The texture dimensions cannot exceed 8192 by 8192. To resolve:</p> <ol> <li>Reduce your character's vertex count. You can decimate vertices in blender or you can use Unreal's reduction settings, found in the Skeletal Mesh editor window: </li> <li>Reduce the number of animation frames </li> <li>Consider using a lower-poly version of your mesh for background characters or switch to bone mode when creating your assets. </li> </ol> VA Asset Collection file size is too large. <p>You can reduce the file size of your asset by unticking precision textures in the animation build settings.</p> <ol> <li>Open the VA Asset Collection and untick Generate High Precision Textures: </li> <li>Select \"Rebuild Asset\" at the top of the editor window.</li> </ol> Ripple or wavy appearing animations. <p>When \"Generate High Precision Textures\" is disabled on your VA Asset Collection, animations may display rippling or wave-like artifacts. This occurs because fewer vertex positions are recorded per vertex, reducing animation texture storage requirements. This lower precision setting is suitable for background crowd instances that remain distant from the camera. However, for crowd elements that will appear closer to the camera, consider either:</p> <ul> <li>Enabling the \"Generate High Precision Textures\" option, or</li> <li>Selecting \"Bone Animation\" mode when creating your VA Asset Collection</li> </ul> <p>Important: Don't forget to press Rebuild Asset when adjusting settings on the VA Asset Collection</p> <p></p>"},{"location":"troubleshooting/#best-practices","title":"Best Practices","text":"<ul> <li>For Nanite meshes, use masked materials instead of translucent. Ideally, design character models to avoid requiring masked materials altogether</li> <li>Keep vertex counts optimized for your target platform</li> <li>Check animation frame rates during import</li> </ul>"},{"location":"troubleshooting/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Step-by-step guide to getting started</li> <li>VA Asset Collection - Asset management and configuration</li> <li>Animation Control - Animation control and playback</li> <li>Custom Animation Lists - Animation system details</li> <li>Crowd Tools Editor Mode - Editor interface overview</li> </ul>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>We also offer direct support through our Discord community, where you can get help from both the developers and other users.</p>"},{"location":"va-asset-collection/","title":"UVAAssetCollection","text":"<p>The VA Asset Collection is the core asset type in the Vertex Animation Studio that manages and stores all data required for vertex animations. It serves as a container that holds meshes, animations, and their associated data.</p> <p></p> <p>For step-by-step instructions on creating a VA Asset Collection, see our Getting Started guide.</p>"},{"location":"va-asset-collection/#overview","title":"Overview","text":"<p>A VA Asset Collection contains:</p> <ul> <li>Source skeletal meshes and their build settings</li> <li>Source animations that were used to make the VA Asset</li> <li>Built vertex animation meshes</li> <li>Animation data stored in textures</li> <li>Material configurations</li> <li>Per-mesh custom data</li> </ul>"},{"location":"va-asset-collection/#va-asset-editor","title":"VA Asset Editor","text":"<p>Double-click a VA Asset Collection to open the editor window where you can configure settings and preview animations.</p> <p></p>"},{"location":"va-asset-collection/#1-rebuild-asset-button","title":"1. Rebuild Asset Button","text":"<p>This button reconstructs your mesh and materials. Use this after making any adjustments in the details panel to ensure your changes are properly applied.</p>"},{"location":"va-asset-collection/#2-preview-mesh-selection","title":"2. Preview Mesh Selection","text":"<p>For Bone VA Asset Collections that contain multiple meshes, this dropdown menu allows you to switch between different meshes in the preview window. This is particularly useful when working with collections that include variations of the same character or object.</p>"},{"location":"va-asset-collection/#3-reapply-custom-data","title":"3. Reapply Custom Data","text":"<p>This button applies custom data changes to your materials. Custom data allows you to pass per-instance float values (like color variations, roughness, etc.) to materials for visual diversity between instances. See Custom Data for setup instructions.</p>"},{"location":"va-asset-collection/#4-details-panel","title":"4. Details Panel","text":"<p>The right-side panel contains crucial settings divided into several categories:</p> <ul> <li>Animation Settings: Configure animation build options and view runtime animation data</li> <li>Mesh Settings: Configure mesh build options and view runtime mesh data  </li> <li>Custom Data: Configure per-instance custom data for material variations</li> </ul> <p>These settings allow you to fine-tune various aspects of your vertex animation.</p>"},{"location":"va-asset-collection/#5-animation-preview","title":"5. Animation Preview","text":"<p>The timeline area displays your currently selected preview animation. You can switch between different animations to visualize how your asset will appear in-game.</p>"},{"location":"va-asset-collection/#6-animation-timeline","title":"6. Animation Timeline","text":"<p>The bottom panel provides standard timeline controls for previewing your animations. Use these controls to play, pause, and scrub through your animation sequences.</p> <p>Remember to click \"Rebuild Asset\" after making changes to apply them.</p>"},{"location":"va-asset-collection/#technical-details","title":"Technical Details","text":""},{"location":"va-asset-collection/#storage-format","title":"Storage Format","text":"<ul> <li>Animations are stored as texture-based vertex data</li> <li>Positions and rotations/normals are split into separate textures</li> <li>Each mesh maintains its own vertex layout and UV configuration</li> <li>Build hashes track asset changes and dependencies</li> </ul>"},{"location":"va-asset-collection/#see-also","title":"See Also","text":"<ul> <li>Getting Started - How to create and configure VA Asset Collections</li> <li>Animation Settings - Configure animation build settings</li> <li>Mesh Settings - Configure mesh build settings</li> <li>Custom Data - Set up per-instance variations</li> <li>Animation Control - Control animations in your VA Asset Collection</li> <li>VA Mesh Component - Use VA Asset Collections with single characters</li> <li>VA Instanced Mesh Component - Use VA Asset Collections with multiple characters</li> </ul>"},{"location":"va-asset-editor-animation/","title":"VA Asset Editor - Animation Settings","text":"<p>This page details the animation-related settings in the VA Asset Editor, covering both build configuration and runtime data.</p>"},{"location":"va-asset-editor-animation/#animation-build-settings","title":"Animation Build Settings","text":"<p>The Animation Build Settings panel lets you manage your animation sequences and build options. Here you can edit the source animation list. Additional settings include options for texture generation quality and power-of-two padding optimization.</p> <p>Note: Remember to click the Rebuild Asset button after making changes.</p>"},{"location":"va-asset-editor-animation/#animation-runtime-data","title":"Animation Runtime Data","text":"<p>This section shows the read-only compiled animation data for each sequence, including:</p> <ul> <li>Animation frame details (start frame, duration, frame rate)</li> <li>Total frame count</li> <li>Animation Bounds</li> <li>Position and rotation/normal texture mappings</li> </ul>"},{"location":"va-asset-editor-animation/#animation-preview","title":"Animation Preview","text":"<p>The timeline area in the VA Asset Editor displays your currently selected preview animation. You can switch between different animations to visualize how your asset will appear in-game.</p> <p>The bottom panel provides standard timeline controls for previewing your animations. Use these controls to play, pause, and scrub through your animation sequences.</p>"},{"location":"va-asset-editor-animation/#see-also","title":"See Also","text":"<ul> <li>VA Asset Collection - Main editor overview</li> <li>VA Editor - Mesh Settings - Configure mesh-related settings</li> <li>VA Editor - Custom Data - Configure per-instance custom data</li> <li>Animation Control - Control animations in your VA Asset Collection</li> <li>Custom Animation Lists - Organize animations for playback</li> </ul>"},{"location":"va-asset-editor-custom-data/","title":"Custom Data - Instance Variations","text":"<p>This page details the custom data settings in the VA Asset Editor, which allow you to create variations between instances of your vertex animated meshes.</p>"},{"location":"va-asset-editor-custom-data/#per-instance-custom-data","title":"Per Instance Custom Data","text":"<p>The Per Instance Custom Data system allows you to inject randomized or controlled float values into your instanced materials. This creates visual diversity across instances without the need for multiple materials or meshes. Each custom data entry consists of:</p> <ul> <li>Custom Data Name: A unique identifier used to reference this parameter in your materials</li> <li>Custom Float Range: Minimum and maximum values for the parameter</li> <li>Round Values to Int: Option to round the generated values to whole numbers</li> </ul> <p></p>"},{"location":"va-asset-editor-custom-data/#setup","title":"Setup","text":"<p>To set up your custom data, follow these steps:</p>"},{"location":"va-asset-editor-custom-data/#step-1-add-per-instance-custom-data-node","title":"Step 1: Add Per Instance Custom Data Node","text":"<p>In your material, add a Per Instance Custom Data node</p>"},{"location":"va-asset-editor-custom-data/#step-2-set-data-index","title":"Step 2: Set Data Index","text":"<p>When creating your first Custom Data node, assign it a Data Index of 12. Indices 0-11 are reserved for system functionality so do not use these indices. Instead start at 12. For each additional Custom Data node, increment the index value (13, 14, etc.).</p> <p></p>"},{"location":"va-asset-editor-custom-data/#step-3-connect-scalarparameter","title":"Step 3: Connect ScalarParameter","text":"<p>Add a ScalarParameter node and name it the name of your Custom Data. Plug the output into the PerInstanceCustomData node input.</p> <p></p>"},{"location":"va-asset-editor-custom-data/#step-4-add-entry-in-va-asset-editor","title":"Step 4: Add Entry in VA Asset Editor","text":"<p>In the VA Asset Collection Editor window, locate the Mesh Runtime Data section and add a new entry to the Per Instance Custom Data list.</p>"},{"location":"va-asset-editor-custom-data/#step-5-configure-custom-data-entry","title":"Step 5: Configure Custom Data Entry","text":"<p>Enter the same Custom Data Name you used for the ScalarParameter in your material. Note that entries in this list correspond sequentially to Per Instance Custom Data Indices in the material itself: the first entry maps to Data Index 12, the second to Index 13, and so on.</p>"},{"location":"va-asset-editor-custom-data/#step-6-set-value-range","title":"Step 6: Set Value Range","text":"<p>Define the variation range by setting minimum and maximum values in the Custom Float fields. Enable the checkbox below to round values to integers if needed.</p> <p></p>"},{"location":"va-asset-editor-custom-data/#step-7-reapply-custom-data","title":"Step 7: Reapply Custom Data","text":"<p>Remember to Reapply Custom Data when you are done.</p> <p></p>"},{"location":"va-asset-editor-custom-data/#usage-examples","title":"Usage Examples","text":"<p>You can use custom data for various effects, such as:</p> <ul> <li>Create color variations by connecting the float value to material color parameters</li> <li>Adjust material properties like roughness or metallic values per instance</li> <li>Control texture tiling or blending between different textures</li> <li>Implement any other material parameter variations you can imagine</li> </ul>"},{"location":"va-asset-editor-custom-data/#how-it-works","title":"How It Works","text":"<p>When the instance is spawned, each custom float parameter will generate a value within its specified range. These values can then be accessed within your material graphs to create unique variations for each instance.</p>"},{"location":"va-asset-editor-custom-data/#see-also","title":"See Also","text":"<ul> <li>VA Asset Collection - Main editor overview</li> <li>VA Editor - Animation Settings - Configure animation-related settings</li> <li>VA Editor - Mesh Settings - Configure mesh-related settings</li> <li>VA Instanced Mesh Component - Use VA Asset Collections with multiple characters</li> </ul>"},{"location":"va-asset-editor-mesh/","title":"VA Asset Editor - Mesh Settings","text":"<p>This page details the mesh-related settings in the VA Asset Editor, covering both build configuration and runtime data.</p>"},{"location":"va-asset-editor-mesh/#mesh-build-settings","title":"Mesh Build Settings","text":"<p>The Mesh Build Settings control how your mesh assets are processed, featuring:</p> <ul> <li>Source mesh selection and configuration</li> <li>LOD settings and Nanite compatibility option</li> <li>Material build settings with bone influence controls</li> <li>Frame blending and animation blending options</li> <li>Source materials list</li> </ul> <p>Note: Remember to click the Rebuild Asset button after making changes.</p>"},{"location":"va-asset-editor-mesh/#mesh-runtime-data","title":"Mesh Runtime Data","text":"<p>This panel displays runtime mesh properties and allows configuration of:</p> <ul> <li>Mesh statistics (vertex count, bones, UV channels)</li> <li>Material assignments and references</li> <li>Custom float parameter ranges for runtime modification</li> </ul>"},{"location":"va-asset-editor-mesh/#preview-mesh-selection","title":"Preview Mesh Selection","text":"<p>For Bone VA Asset Collections that contain multiple meshes, the dropdown menu in the VA Asset Editor allows you to switch between different meshes in the preview window. This is particularly useful when working with collections that include variations of the same character or object.</p>"},{"location":"va-asset-editor-mesh/#see-also","title":"See Also","text":"<ul> <li>VA Asset Collection - Main editor overview</li> <li>VA Editor - Animation Settings - Configure animation-related settings</li> <li>VA Editor - Custom Data - Configure per-instance custom data</li> <li>VA Mesh Component - Use VA Asset Collections with single characters</li> <li>VA Instanced Mesh Component - Use VA Asset Collections with multiple characters</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/","title":"VA Instanced Mesh Component","text":"<p>The VA Instanced Mesh Component provides efficient rendering and animation control for multiple instances of vertex-animated meshes. This component is essential for crowd scenarios, repeated environmental elements, and any situation requiring many animated meshes with optimized performance.</p>"},{"location":"vertex-anim-instanced-mesh-component/#component-types","title":"Component Types","text":"<p>The plugin provides three distinct instanced mesh components for different use cases:</p>"},{"location":"vertex-anim-instanced-mesh-component/#uvainstancedmeshcomponent","title":"UVAInstancedMeshComponent","text":"<p>Basic instanced mesh component that inherits from <code>UInstancedStaticMeshComponent</code>. Best for simple multi-instance scenarios where you need basic instancing without advanced spatial organization.</p>"},{"location":"vertex-anim-instanced-mesh-component/#uvahierarchicalinstancedmeshcomponent","title":"UVAHierarchicalInstancedMeshComponent","text":"<p>Advanced hierarchical version that inherits from <code>UHierarchicalInstancedStaticMeshComponent</code>. Provides spatial optimization for large numbers of instances through hierarchical organization. Use this for performance-critical scenarios with hundreds or thousands of instances.</p>"},{"location":"vertex-anim-instanced-mesh-component/#uvacrowdinstancedcomponent","title":"UVACrowdInstancedComponent","text":"<p>Internal crowd system component that is automatically generated by the Crowd Tools when painting instances in Crowd Editor Mode. This component is not directly accessible in Blueprints - instead, it's created and managed behind the scenes when you use the crowd painting tools. Includes specialized features for crowd management, spatial queries, and editor integration.</p>"},{"location":"vertex-anim-instanced-mesh-component/#core-properties","title":"Core Properties","text":"<p>Each VA Instanced Mesh Component includes these essential properties:</p> <ul> <li>Vertex Animation Asset: The VA Asset Collection containing mesh and animation data</li> <li>Vertex Animation Mesh Index: Which mesh to use from the asset collection (for multi-mesh collections)</li> <li>Custom Data Floats Hash: Read-only validation hash for custom data configurations</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/#animation-sub-components","title":"Animation Sub-Components","text":"<p>The VA Instanced Mesh Component uses a modular architecture with specialized sub-components:</p> <ul> <li>Animation Lists Collection: Manages multiple animation lists for complex behaviors</li> <li>Animation Mode Manager: Controls animation modes (Single vs AnimList)</li> <li>Animation Player: Handles the actual animation playback</li> <li>Instance Data Stores: Manage both persistent and runtime animation data per instance</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/#instance-data-management","title":"Instance Data Management","text":"<p>The component uses a sophisticated dual data store system:</p>"},{"location":"vertex-anim-instanced-mesh-component/#persistent-data-store","title":"Persistent Data Store","text":"<p>Saves instance-specific animation states that persist across editor sessions and level reloads. This includes saved animation assignments and custom animation parameters.</p>"},{"location":"vertex-anim-instanced-mesh-component/#transient-data-store","title":"Transient Data Store","text":"<p>Manages runtime-only instance data for performance optimization. This data is recreated each session and doesn't persist to disk.</p>"},{"location":"vertex-anim-instanced-mesh-component/#per-instance-data-access","title":"Per-Instance Data Access","text":"<p>Each instance can have individual animation settings, custom data values, and animation states managed independently through the data store system.</p>"},{"location":"vertex-anim-instanced-mesh-component/#per-instance-animation-control","title":"Per-Instance Animation Control","text":"<p>Unlike basic static mesh components, VA Instanced Mesh Components provide granular per-instance animation control:</p>"},{"location":"vertex-anim-instanced-mesh-component/#individual-animation-functions","title":"Individual Animation Functions","text":"<ul> <li><code>PlayAnimation</code>: Start specific animations on selected instances</li> <li><code>SetAnimationPlayRate</code>: Control playback speed per instance  </li> <li><code>PauseAnimation</code> / <code>ResumeAnimation</code>: Pause and resume individual instances</li> <li><code>SetAnimationPosition</code>: Jump to specific animation times per instance</li> <li><code>StopAnimation</code>: Stop animations on specific instances</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/#batch-animation-operations","title":"Batch Animation Operations","text":"<ul> <li><code>BatchUpdateInstancesTransforms</code>: Efficiently update multiple instance transforms</li> <li><code>BatchUpdateInstancesData</code>: Bulk update instance animation data</li> <li><code>ChangeInstanceList</code>: Switch instances between different animation lists</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/#animation-list-management","title":"Animation List Management","text":"<ul> <li><code>GetInstancesInList</code>: Query which instances are using specific animation lists</li> <li><code>SetInstanceAnimListData</code> / <code>GetInstanceAnimListData</code>: Manage per-instance animation list data</li> </ul>"},{"location":"vertex-anim-instanced-mesh-component/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"vertex-anim-instanced-mesh-component/#efficient-instance-removal","title":"Efficient Instance Removal","text":"<p>The component uses <code>SetRemoveSwap()</code> for optimized instance removal that maintains performance when dynamically adding/removing instances from large collections.</p>"},{"location":"vertex-anim-instanced-mesh-component/#lod-support","title":"LOD Support","text":"<p>When not using Nanite-enabled VA Asset Collections, the component supports automatic LOD switching based on distance for optimal performance with large instance counts.</p>"},{"location":"vertex-anim-instanced-mesh-component/#nanite-integration","title":"Nanite Integration","text":"<p>For Nanite-enabled assets, includes <code>ExtraWPONaniteAllowance</code> property for world position offset compatibility with Nanite virtualized geometry.</p>"},{"location":"vertex-anim-instanced-mesh-component/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how components fit into the overall process</li> <li>Crowd Tools - Tools for placing and managing crowd instances</li> <li>VA Mesh Component - For single instance usage</li> <li>Animation Control - Understanding animation modes and control</li> <li>Custom Animation Lists - Create custom animation behaviors</li> <li>VA Asset Collection - The asset type used by this component</li> </ul>"},{"location":"vertex-anim-mesh-component/","title":"UVAMeshComponent","text":"<p>A component that allows playback of a single instance of a VA Asset Collection. Perfect for hero characters or any situation where you need precise control over a single animated mesh, rather than managing multiple instances with the VA Instanced Mesh Component.</p> <p>The VA Mesh Component inherits from UStaticMeshComponent and uses a modular architecture with separate sub-components for different functionalities.</p> <p></p>"},{"location":"vertex-anim-mesh-component/#core-properties","title":"Core Properties","text":"<ul> <li>Vertex Animation Asset: Select your VA Asset Collection containing the mesh and animation data</li> <li>Vertex Animation Mesh Index: Select which mesh to use from the asset collection (if it contains multiple meshes)</li> <li>Custom Data Floats Hash: Read-only property showing the hash of custom data configurations</li> </ul>"},{"location":"vertex-anim-mesh-component/#sub-components-architecture","title":"Sub-Components Architecture","text":"<p>The VA Mesh Component uses a modular design with specialized sub-components:</p> <ul> <li>Animation Lists Collection: Manages multiple animation lists</li> <li>Animation Mode Manager: Controls how animations are played (single vs. list mode)</li> <li>Instance Data Stores: Manage both persistent and runtime-only animation data</li> </ul>"},{"location":"vertex-anim-mesh-component/#animation-modes","title":"Animation Modes","text":""},{"location":"vertex-anim-mesh-component/#single-animation-mode","title":"Single Animation Mode","text":"<p>Play individual animations directly from the VA Asset Collection. Use this mode when you need precise control over specific animations.</p>"},{"location":"vertex-anim-mesh-component/#animation-list-mode","title":"Animation List Mode","text":"<p>Play animations through Animation Lists that define playback behavior. Animation Lists can be:</p> <ul> <li>Sequential: Play animations in order</li> <li>Random: Play animations randomly from the list</li> <li>Custom Logic: Use custom animation list implementations</li> </ul>"},{"location":"vertex-anim-mesh-component/#animation-lists","title":"Animation Lists","text":"<p>Animation Lists are now <code>UVAAnimationList</code> objects that contain:</p> <ul> <li>Animation References: List of animations from the VA Asset Collection</li> <li>Logic Data: Settings that control playback behavior</li> <li>Playback Rules: How animations transition and repeat</li> </ul>"},{"location":"vertex-anim-mesh-component/#animation-control-functions","title":"Animation Control Functions","text":"<p>Key Blueprint-callable functions for controlling animations:</p> <ul> <li><code>PlaySingleAnimation</code>: Play a specific animation from the asset collection</li> <li><code>PlayAnimationList</code>: Start playback using an animation list</li> <li><code>SetAnimationAsset</code>: Change the VA Asset Collection at runtime</li> <li><code>SetAnimationMeshIndex</code>: Switch between meshes in multi-mesh collections</li> <li><code>SetAnimationMode</code>: Toggle between single and list animation modes</li> </ul> <p>These functions are provided by the Animation Mode Manager and Animation Lists systems.</p>"},{"location":"vertex-anim-mesh-component/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Understand how components fit into the overall process</li> <li>VA Instanced Mesh Component - For managing multiple instances</li> <li>Animation Control - Control animations with Single and AnimList modes</li> <li>Custom Animation Lists - Create custom animation behaviors</li> <li>VA Asset Collection - The asset type used by this component</li> </ul>"}]}